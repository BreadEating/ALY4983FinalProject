name: CI-CD

on:
  pull_request:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO: ${{ secrets.ECR_REPO }}
  ENDPOINT_NAME: ${{ secrets.ENDPOINT_NAME }}
  ROLE_ARN: ${{ secrets.ROLE_ARN }}

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc[s3] pytest

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Pull data via DVC
        run: dvc pull

      - name: Run pipeline (ingest + validate)
        run: |
          python -m src.data_ingest
          python -m src.data_validation

      - name: Unit tests
        run: pytest -q

  cd:
    needs: ci
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps (DVC for repro)
        run: |
          pip install --upgrade pip
          pip install dvc[s3]

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Build full pipeline (produces artifacts/)
        run: dvc repro

      - name: Log in to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build (linux/amd64) & load to classic Docker (ensures Docker v2 manifest)
        run: |
          docker buildx create --use --name sm-builder || true
          docker buildx build --platform linux/amd64 \
            --output=type=docker \
            --attest type=provenance,disabled=true \
            -t credit-inference:ci .

      - name: Tag & push to ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}
          docker tag credit-inference:ci $IMAGE_URI
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "Pushed $IMAGE_URI"

      - name: Create/Update SageMaker endpoint
        env:
          INSTANCE_TYPE: ml.t2.medium
          INITIAL_INSTANCE_COUNT: 1
          VARIANT_NAME: AllTraffic
        run: |
          IMAGE_URI=${{ env.IMAGE_URI }}
          STAMP=$(date +%Y%m%d%H%M%S)
          MODEL_NAME=ci-model-$STAMP
          CFG_NAME=ci-cfg-$STAMP

          aws sagemaker create-model \
            --model-name "$MODEL_NAME" \
            --primary-container Image="$IMAGE_URI" \
            --execution-role-arn "${ROLE_ARN}" \
            --region "${AWS_REGION}"

          aws sagemaker create-endpoint-config \
            --endpoint-config-name "$CFG_NAME" \
            --production-variants "[{\"VariantName\":\"$VARIANT_NAME\",\"ModelName\":\"$MODEL_NAME\",\"InitialInstanceCount\":${INITIAL_INSTANCE_COUNT},\"InstanceType\":\"$INSTANCE_TYPE\"}]" \
            --region "${AWS_REGION}"

          aws sagemaker describe-endpoint --endpoint-name "${ENDPOINT_NAME}" --region "${AWS_REGION}" >/dev/null 2>&1 \
            && aws sagemaker update-endpoint --endpoint-name "${ENDPOINT_NAME}" --endpoint-config-name "$CFG_NAME" --region "${AWS_REGION}" \
            || aws sagemaker create-endpoint --endpoint-name "${ENDPOINT_NAME}" --endpoint-config-name "$CFG_NAME" --region "${AWS_REGION}"

          aws sagemaker wait endpoint-in-service --endpoint-name "${ENDPOINT_NAME}" --region "${AWS_REGION}"